unit gfile;

interface

uses
  common_GLIB, gtypes, gtype, giotypes, garray, gerror, gioenums, gfileenumerator, gfileattribute, gfileinputstream, gfileoutputstream, gfilemonitor, gmountoperation, gfileiostream;

  {$IFDEF FPC}
  {$PACKRECORDS C}
  {$ENDIF}

type
  TGFileIface = record
    g_iface: TGTypeInterface;
    dup: function(file_: PGFile): PGFile; cdecl;
    hash: function(file_: PGFile): Tguint; cdecl;
    equal: function(file1: PGFile; file2: PGFile): Tgboolean; cdecl;
    is_native: function(file_: PGFile): Tgboolean; cdecl;
    has_uri_scheme: function(file_: PGFile; uri_scheme: PChar): Tgboolean; cdecl;
    get_uri_scheme: function(file_: PGFile): PChar; cdecl;
    get_basename: function(file_: PGFile): PChar; cdecl;
    get_path: function(file_: PGFile): PChar; cdecl;
    get_uri: function(file_: PGFile): PChar; cdecl;
    get_parse_name: function(file_: PGFile): PChar; cdecl;
    get_parent: function(file_: PGFile): PGFile; cdecl;
    prefix_matches: function(prefix: PGFile; file_: PGFile): Tgboolean; cdecl;
    get_relative_path: function(parent: PGFile; descendant: PGFile): PChar; cdecl;
    resolve_relative_path: function(file_: PGFile; relative_path: PChar): PGFile; cdecl;
    get_child_for_display_name: function(file_: PGFile; display_name: PChar; error: PPGError): PGFile; cdecl;
    enumerate_children: function(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileEnumerator; cdecl;
    enumerate_children_async: procedure(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
      callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    enumerate_children_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileEnumerator; cdecl;
    query_info: function(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_info_async: procedure(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
      callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    query_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    query_filesystem_info: function(file_: PGFile; attributes: PChar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl;
    query_filesystem_info_async: procedure(file_: PGFile; attributes: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    query_filesystem_info_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl;
    find_enclosing_mount: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGMount; cdecl;
    find_enclosing_mount_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    find_enclosing_mount_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGMount; cdecl;
    set_display_name: function(file_: PGFile; display_name: PChar; cancellable: PGCancellable; error: PPGError): PGFile; cdecl;
    set_display_name_async: procedure(file_: PGFile; display_name: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    set_display_name_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFile; cdecl;
    query_settable_attributes: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
    _query_settable_attributes_async: procedure; cdecl;
    _query_settable_attributes_finish: procedure; cdecl;
    query_writable_namespaces: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl;
    _query_writable_namespaces_async: procedure; cdecl;
    _query_writable_namespaces_finish: procedure; cdecl;
    set_attribute: function(file_: PGFile; attribute: PChar; _type: TGFileAttributeType; value_p: Tgpointer; flags: TGFileQueryInfoFlags;
      cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    set_attributes_from_info: function(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    set_attributes_async: procedure(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
      callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    set_attributes_finish: function(file_: PGFile; Result: PGAsyncResult; info: PPGFileInfo; error: PPGError): Tgboolean; cdecl;
    read_fn: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileInputStream; cdecl;
    read_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    read_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInputStream; cdecl;
    append_to: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
    append_to_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    append_to_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    Create: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl;
    create_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    create_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    replace: function(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; cancellable: PGCancellable;
      error: PPGError): PGFileOutputStream; cdecl;
    replace_async: procedure(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; io_priority: longint;
      cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    replace_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl;
    delete_file: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    delete_file_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    delete_file_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    trash: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    trash_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    trash_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    make_directory: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    make_directory_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    make_directory_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    make_symbolic_link: function(file_: PGFile; symlink_value: PChar; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl;
    make_symbolic_link_async: procedure(file_: PGFile; symlink_value: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    make_symbolic_link_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    copy: function(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback;
      progress_callback_data: Tgpointer; error: PPGError): Tgboolean; cdecl;
    copy_async: procedure(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: longint; cancellable: PGCancellable;
      progress_callback: TGFileProgressCallback; progress_callback_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    copy_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    move: function(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback;
      progress_callback_data: Tgpointer; error: PPGError): Tgboolean; cdecl;
    move_async: procedure(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: longint; cancellable: PGCancellable;
      progress_callback: TGFileProgressCallback; progress_callback_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    move_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    mount_mountable: procedure(file_: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    mount_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): PGFile; cdecl;
    unmount_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    unmount_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    eject_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    eject_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    mount_enclosing_volume: procedure(location: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    mount_enclosing_volume_finish: function(location: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    monitor_dir: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
    monitor_file: function(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl;
    open_readwrite: function(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
    open_readwrite_async: procedure(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    open_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    create_readwrite: function(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl;
    create_readwrite_async: procedure(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    create_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    replace_readwrite: function(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; cancellable: PGCancellable;
      error: PPGError): PGFileIOStream; cdecl;
    replace_readwrite_async: procedure(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; io_priority: longint;
      cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    replace_readwrite_finish: function(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl;
    start_mountable: procedure(file_: PGFile; flags: TGDriveStartFlags; start_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    start_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    stop_mountable: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    stop_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    supports_thread_contexts: Tgboolean;
    unmount_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    unmount_mountable_with_operation_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    eject_mountable_with_operation: procedure(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
      user_data: Tgpointer); cdecl;
    eject_mountable_with_operation_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    poll_mountable: procedure(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    poll_mountable_finish: function(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl;
    measure_disk_usage: function(file_: PGFile; flags: TGFileMeasureFlags; cancellable: PGCancellable; progress_callback: TGFileMeasureProgressCallback; progress_data: Tgpointer;
      disk_usage: Pguint64; num_dirs: Pguint64; num_files: Pguint64; error: PPGError): Tgboolean; cdecl;
    measure_disk_usage_async: procedure(file_: PGFile; flags: TGFileMeasureFlags; io_priority: Tgint; cancellable: PGCancellable; progress_callback: TGFileMeasureProgressCallback;
      progress_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl;
    measure_disk_usage_finish: function(file_: PGFile; Result: PGAsyncResult; disk_usage: Pguint64; num_dirs: Pguint64; num_files: Pguint64;
      error: PPGError): Tgboolean; cdecl;
  end;
  PGFileIface = ^TGFileIface;


function g_file_get_type: TGType; cdecl; external libgio2;
function g_file_new_for_path(path: PChar): PGFile; cdecl; external libgio2;
function g_file_new_for_uri(uri: PChar): PGFile; cdecl; external libgio2;
function g_file_new_for_commandline_arg(arg: PChar): PGFile; cdecl; external libgio2;
function g_file_new_for_commandline_arg_and_cwd(arg: Pgchar; cwd: Pgchar): PGFile; cdecl; external libgio2;
function g_file_new_tmp(tmpl: PChar; iostream: PPGFileIOStream; error: PPGError): PGFile; cdecl; external libgio2;
procedure g_file_new_tmp_async(tmpl: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_new_tmp_finish(Result: PGAsyncResult; iostream: PPGFileIOStream; error: PPGError): PGFile; cdecl; external libgio2;
procedure g_file_new_tmp_dir_async(tmpl: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_new_tmp_dir_finish(Result: PGAsyncResult; error: PPGError): PGFile; cdecl; external libgio2;
function g_file_parse_name(parse_name: PChar): PGFile; cdecl; external libgio2;
function g_file_new_build_filename(first_element: Pgchar; args: array of const): PGFile; cdecl; external libgio2;
function g_file_new_build_filename(first_element: Pgchar): PGFile; cdecl; external libgio2;
function g_file_new_build_filenamev(args: PPgchar): PGFile; cdecl; external libgio2;
function g_file_dup(file_: PGFile): PGFile; cdecl; external libgio2;
function g_file_hash(_file: Tgconstpointer): Tguint; cdecl; external libgio2;
function g_file_equal(file1: PGFile; file2: PGFile): Tgboolean; cdecl; external libgio2;
function g_file_get_basename(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_get_path(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_peek_path(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_get_uri(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_get_parse_name(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_get_parent(file_: PGFile): PGFile; cdecl; external libgio2;
function g_file_has_parent(file_: PGFile; parent: PGFile): Tgboolean; cdecl; external libgio2;
function g_file_get_child(file_: PGFile; Name: PChar): PGFile; cdecl; external libgio2;
function g_file_get_child_for_display_name(file_: PGFile; display_name: PChar; error: PPGError): PGFile; cdecl; external libgio2;
function g_file_has_prefix(file_: PGFile; prefix: PGFile): Tgboolean; cdecl; external libgio2;
function g_file_get_relative_path(parent: PGFile; descendant: PGFile): PChar; cdecl; external libgio2;
function g_file_resolve_relative_path(file_: PGFile; relative_path: PChar): PGFile; cdecl; external libgio2;
function g_file_is_native(file_: PGFile): Tgboolean; cdecl; external libgio2;
function g_file_has_uri_scheme(file_: PGFile; uri_scheme: PChar): Tgboolean; cdecl; external libgio2;
function g_file_get_uri_scheme(file_: PGFile): PChar; cdecl; external libgio2;
function g_file_read(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileInputStream; cdecl; external libgio2;
procedure g_file_read_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_read_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInputStream; cdecl; external libgio2;
function g_file_append_to(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl; external libgio2;
function g_file_create(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileOutputStream; cdecl; external libgio2;
function g_file_replace(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; cancellable: PGCancellable;
  error: PPGError): PGFileOutputStream; cdecl; external libgio2;
procedure g_file_append_to_async(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_append_to_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl; external libgio2;
procedure g_file_create_async(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_create_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl; external libgio2;
procedure g_file_replace_async(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; io_priority: longint;
  cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_replace_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileOutputStream; cdecl; external libgio2;
function g_file_open_readwrite(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl; external libgio2;
procedure g_file_open_readwrite_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_open_readwrite_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl; external libgio2;
function g_file_create_readwrite(file_: PGFile; flags: TGFileCreateFlags; cancellable: PGCancellable; error: PPGError): PGFileIOStream; cdecl; external libgio2;
procedure g_file_create_readwrite_async(file_: PGFile; flags: TGFileCreateFlags; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_create_readwrite_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl; external libgio2;
function g_file_replace_readwrite(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; cancellable: PGCancellable;
  error: PPGError): PGFileIOStream; cdecl; external libgio2;
procedure g_file_replace_readwrite_async(file_: PGFile; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags; io_priority: longint;
  cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_replace_readwrite_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileIOStream; cdecl; external libgio2;
function g_file_query_exists(file_: PGFile; cancellable: PGCancellable): Tgboolean; cdecl; external libgio2;
function g_file_query_file_type(file_: PGFile; flags: TGFileQueryInfoFlags; cancellable: PGCancellable): TGFileType; cdecl; external libgio2;
function g_file_query_info(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl; external libgio2;
procedure g_file_query_info_async(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
  callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_query_info_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl; external libgio2;
function g_file_query_filesystem_info(file_: PGFile; attributes: PChar; cancellable: PGCancellable; error: PPGError): PGFileInfo; cdecl; external libgio2;
procedure g_file_query_filesystem_info_async(file_: PGFile; attributes: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_query_filesystem_info_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileInfo; cdecl; external libgio2;
function g_file_find_enclosing_mount(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGMount; cdecl; external libgio2;
procedure g_file_find_enclosing_mount_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_find_enclosing_mount_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGMount; cdecl; external libgio2;
function g_file_enumerate_children(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): PGFileEnumerator; cdecl; external libgio2;
procedure g_file_enumerate_children_async(file_: PGFile; attributes: PChar; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
  callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_enumerate_children_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFileEnumerator; cdecl; external libgio2;
function g_file_set_display_name(file_: PGFile; display_name: PChar; cancellable: PGCancellable; error: PPGError): PGFile; cdecl; external libgio2;
procedure g_file_set_display_name_async(file_: PGFile; display_name: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_set_display_name_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): PGFile; cdecl; external libgio2;
function g_file_delete(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_delete_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_delete_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_trash(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_trash_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_trash_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_copy(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback;
  progress_callback_data: Tgpointer; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_copy_async(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: longint; cancellable: PGCancellable;
  progress_callback: TGFileProgressCallback; progress_callback_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_copy_finish(file_: PGFile; res: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_move(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; progress_callback: TGFileProgressCallback;
  progress_callback_data: Tgpointer; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_move_async(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; io_priority: longint; cancellable: PGCancellable;
  progress_callback: TGFileProgressCallback; progress_callback_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_move_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_make_directory(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_make_directory_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_make_directory_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_make_directory_with_parents(file_: PGFile; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_make_symbolic_link(file_: PGFile; symlink_value: PChar; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_make_symbolic_link_async(file_: PGFile; symlink_value: PChar; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_make_symbolic_link_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_query_settable_attributes(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl; external libgio2;
function g_file_query_writable_namespaces(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGFileAttributeInfoList; cdecl; external libgio2;
function g_file_set_attribute(file_: PGFile; attribute: PChar; _type: TGFileAttributeType; value_p: Tgpointer; flags: TGFileQueryInfoFlags;
  cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attributes_from_info(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_set_attributes_async(file_: PGFile; info: PGFileInfo; flags: TGFileQueryInfoFlags; io_priority: longint; cancellable: PGCancellable;
  callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_set_attributes_finish(file_: PGFile; Result: PGAsyncResult; info: PPGFileInfo; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_string(file_: PGFile; attribute: PChar; Value: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_byte_string(file_: PGFile; attribute: PChar; Value: PChar; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_uint32(file_: PGFile; attribute: PChar; Value: Tguint32; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_int32(file_: PGFile; attribute: PChar; Value: Tgint32; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_uint64(file_: PGFile; attribute: PChar; Value: Tguint64; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_set_attribute_int64(file_: PGFile; attribute: PChar; Value: Tgint64; flags: TGFileQueryInfoFlags; cancellable: PGCancellable;
  error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_mount_enclosing_volume(location: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_mount_enclosing_volume_finish(location: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_mount_mountable(file_: PGFile; flags: TGMountMountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_mount_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): PGFile; cdecl; external libgio2;
procedure g_file_unmount_mountable(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_unmount_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_unmount_mountable_with_operation(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_unmount_mountable_with_operation_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_eject_mountable(file_: PGFile; flags: TGMountUnmountFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_eject_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_eject_mountable_with_operation(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_eject_mountable_with_operation_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_build_attribute_list_for_copy(file_: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; error: PPGError): PChar; cdecl; external libgio2;
function g_file_copy_attributes(Source: PGFile; destination: PGFile; flags: TGFileCopyFlags; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_monitor_directory(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl; external libgio2;
function g_file_monitor_file(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl; external libgio2;
function g_file_monitor(file_: PGFile; flags: TGFileMonitorFlags; cancellable: PGCancellable; error: PPGError): PGFileMonitor; cdecl; external libgio2;
function g_file_measure_disk_usage(file_: PGFile; flags: TGFileMeasureFlags; cancellable: PGCancellable; progress_callback: TGFileMeasureProgressCallback; progress_data: Tgpointer;
  disk_usage: Pguint64; num_dirs: Pguint64; num_files: Pguint64; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_measure_disk_usage_async(file_: PGFile; flags: TGFileMeasureFlags; io_priority: Tgint; cancellable: PGCancellable; progress_callback: TGFileMeasureProgressCallback;
  progress_data: Tgpointer; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_measure_disk_usage_finish(file_: PGFile; Result: PGAsyncResult; disk_usage: Pguint64; num_dirs: Pguint64; num_files: Pguint64;
  error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_start_mountable(file_: PGFile; flags: TGDriveStartFlags; start_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_start_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_stop_mountable(file_: PGFile; flags: TGMountUnmountFlags; mount_operation: PGMountOperation; cancellable: PGCancellable; callback: TGAsyncReadyCallback;
  user_data: Tgpointer); cdecl; external libgio2;
function g_file_stop_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_poll_mountable(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_poll_mountable_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_query_default_handler(file_: PGFile; cancellable: PGCancellable; error: PPGError): PGAppInfo; cdecl; external libgio2;
procedure g_file_query_default_handler_async(file_: PGFile; io_priority: longint; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_query_default_handler_finish(file_: PGFile; Result: PGAsyncResult; error: PPGError): PGAppInfo; cdecl; external libgio2;
function g_file_load_contents(file_: PGFile; cancellable: PGCancellable; contents: PPchar; length: Pgsize; etag_out: PPchar;
  error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_load_contents_async(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_load_contents_finish(file_: PGFile; res: PGAsyncResult; contents: PPchar; length: Pgsize; etag_out: PPchar;
  error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_load_partial_contents_async(file_: PGFile; cancellable: PGCancellable; read_more_callback: TGFileReadMoreCallback; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_load_partial_contents_finish(file_: PGFile; res: PGAsyncResult; contents: PPchar; length: Pgsize; etag_out: PPchar;
  error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_replace_contents(file_: PGFile; contents: PChar; length: Tgsize; etag: PChar; make_backup: Tgboolean;
  flags: TGFileCreateFlags; new_etag: PPchar; cancellable: PGCancellable; error: PPGError): Tgboolean; cdecl; external libgio2;
procedure g_file_replace_contents_async(file_: PGFile; contents: PChar; length: Tgsize; etag: PChar; make_backup: Tgboolean;
  flags: TGFileCreateFlags; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
procedure g_file_replace_contents_bytes_async(file_: PGFile; contents: PGBytes; etag: PChar; make_backup: Tgboolean; flags: TGFileCreateFlags;
  cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_replace_contents_finish(file_: PGFile; res: PGAsyncResult; new_etag: PPchar; error: PPGError): Tgboolean; cdecl; external libgio2;
function g_file_supports_thread_contexts(file_: PGFile): Tgboolean; cdecl; external libgio2;
function g_file_load_bytes(file_: PGFile; cancellable: PGCancellable; etag_out: PPgchar; error: PPGError): PGBytes; cdecl; external libgio2;
procedure g_file_load_bytes_async(file_: PGFile; cancellable: PGCancellable; callback: TGAsyncReadyCallback; user_data: Tgpointer); cdecl; external libgio2;
function g_file_load_bytes_finish(file_: PGFile; Result: PGAsyncResult; etag_out: PPgchar; error: PPGError): PGBytes; cdecl; external libgio2;

// === Konventiert am: 18-8-24 15:01:55 ===

function G_TYPE_FILE: TGType;
function G_FILE(obj: Pointer): PGFile;
function G_IS_FILE(obj: Pointer): Tgboolean;
function G_FILE_GET_IFACE(obj: Pointer): PGFileIface;

implementation

function G_TYPE_FILE: TGType;
begin
  G_TYPE_FILE := g_file_get_type;
end;

function G_FILE(obj: Pointer): PGFile;
begin
  Result := PGFile(g_type_check_instance_cast(obj, G_TYPE_FILE));
end;

function G_IS_FILE(obj: Pointer): Tgboolean;
begin
  Result := g_type_check_instance_is_a(obj, G_TYPE_FILE);
end;

function G_FILE_GET_IFACE(obj: Pointer): PGFileIface;
begin
  Result := g_type_interface_peek(obj, G_TYPE_FILE);
end;



end.
